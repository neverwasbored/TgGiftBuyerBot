import json
import aiohttp
from aiogram import types, Router
from aiogram.filters import Command

from api.gifts import GiftsApi
from utils.logger import log

router = Router()
gifts_api = GiftsApi()


@router.message(Command(commands=["gift_stats"]))
async def gift_statistics(message: types.Message, db_session):
    """
    Show statistics about gifts in the system.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å API
        async with aiohttp.ClientSession() as session:
            api_gifts = await gifts_api.aio_get_available_gifts(session)
        
        if not api_gifts:
            await message.answer("‚ùå Failed to fetch gifts from API")
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∞—Ä–∫–∏
        total_api = len(api_gifts)
        unlimited_api = len([g for g in api_gifts if g.get('total_count') is None or g.get('remaining_count') is None])
        limited_api = total_api - unlimited_api
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        with db_session as db:
            from db.models import Gift
            
            db_gifts = db.query(Gift).all()
            new_db_gifts = db.query(Gift).filter(Gift.is_new == 1).all()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º –≤ –ë–î
            if db_gifts:
                prices = [g.price for g in db_gifts if g.price]
                min_price = min(prices) if prices else 0
                max_price = max(prices) if prices else 0
                avg_price = sum(prices) / len(prices) if prices else 0
            else:
                min_price = max_price = avg_price = 0
        
        stats_text = (
            "üìä **GIFT STATISTICS**\n\n"
            "**API Data:**\n"
            f"‚Ä¢ Total gifts from API: {total_api}\n"
            f"‚Ä¢ Limited gifts: {limited_api} ‚úÖ\n"
            f"‚Ä¢ Unlimited gifts: {unlimited_api} ‚ùå (ignored)\n\n"
            "**Database Data:**\n"
            f"‚Ä¢ Gifts in DB: {len(db_gifts)} (only limited)\n"
            f"‚Ä¢ New gifts for autobuy: {len(new_db_gifts)}\n\n"
        )
        
        if db_gifts:
            stats_text += (
                "**Price Range (DB):**\n"
                f"‚Ä¢ Min: {min_price}‚≠ê\n"
                f"‚Ä¢ Max: {max_price}‚≠ê\n"
                f"‚Ä¢ Average: {avg_price:.1f}‚≠ê\n\n"
            )
        
        # –ü—Ä–∏–º–µ—Ä—ã –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
        limited_examples = [g for g in api_gifts if g.get('total_count') is not None][:5]
        if limited_examples:
            stats_text += "**Limited Gift Examples:**\n"
            for gift in limited_examples:
                stats_text += (
                    f"‚Ä¢ {gift.get('sticker', {}).get('emoji', 'üéÅ')} "
                    f"ID: {gift['id']} | {gift['star_count']}‚≠ê | "
                    f"{gift.get('remaining_count')}/{gift.get('total_count')}\n"
                )
        
        await message.answer(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        log.error(f"Error in gift_statistics: {e}")
        await message.answer(f"‚ùå Error: {str(e)}")


@router.message(Command(commands=["raw_api"]))
async def raw_api_response(message: types.Message):
    """
    Show raw API response structure without any filtering.
    """
    try:
        url = f"https://api.telegram.org/bot{gifts_api.bot_token}/getAvailableGifts"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                structure_info = (
                    "üîç **Raw API Response Structure:**\n\n"
                    f"‚Ä¢ Status: {'‚úÖ OK' if data.get('ok') else '‚ùå Error'}\n"
                    f"‚Ä¢ Top-level keys: {list(data.keys())}\n"
                )
                
                if data.get('ok') and 'result' in data:
                    result = data['result']
                    structure_info += f"‚Ä¢ Result keys: {list(result.keys())}\n"
                    
                    if 'gifts' in result:
                        gifts = result['gifts']
                        structure_info += f"‚Ä¢ Total gifts in response: {len(gifts)}\n"
                        
                        if gifts:
                            first_gift = gifts[0]
                            structure_info += f"\n**First gift structure:**\n"
                            structure_info += f"‚Ä¢ Keys: {list(first_gift.keys())}\n"
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                            for key, value in first_gift.items():
                                value_type = type(value).__name__
                                if isinstance(value, dict):
                                    structure_info += f"‚Ä¢ {key}: {value_type} with keys {list(value.keys())}\n"
                                else:
                                    structure_info += f"‚Ä¢ {key}: {value_type}\n"
                
                await message.answer(structure_info, parse_mode="Markdown")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—ã—Ä–æ–π JSON –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞
                if data.get('ok') and data.get('result', {}).get('gifts'):
                    first_gift_json = json.dumps(
                        data['result']['gifts'][0], 
                        indent=2, 
                        ensure_ascii=False
                    )
                    await message.answer(
                        f"```json\n{first_gift_json}\n```",
                        parse_mode="Markdown"
                    )
                
    except Exception as e:
        log.error(f"Error in raw_api_response: {e}")
        await message.answer(f"‚ùå Error: {str(e)}")


@router.message(Command(commands=["debug_gifts"]))
async def debug_gifts_command(message: types.Message):
    """
    Debug command to see raw JSON response from gifts API.
    """
    try:
        await message.answer("üîç Fetching gifts data...")
        
        async with aiohttp.ClientSession() as session:
            gifts = await gifts_api.aio_get_available_gifts(session)
            
            if gifts:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                summary = f"üìä Total gifts found: {len(gifts)}\n\n"
                
                for idx, gift in enumerate(gifts[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    summary += (
                        f"Gift #{idx + 1}:\n"
                        f"‚Ä¢ ID: {gift.get('id')}\n"
                        f"‚Ä¢ Price: {gift.get('star_count')}‚≠ê\n"
                        f"‚Ä¢ Remaining: {gift.get('remaining_count', 'Unlimited')}\n"
                        f"‚Ä¢ Total: {gift.get('total_count', 'Unlimited')}\n"
                        f"‚Ä¢ Emoji: {gift.get('sticker', {}).get('emoji', 'N/A')}\n\n"
                    )
                
                if len(gifts) > 10:
                    summary += f"... and {len(gifts) - 10} more gifts\n"
                
                await message.answer(summary)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π JSON —Ñ–∞–π–ª
                json_content = json.dumps({"gifts": gifts}, indent=2, ensure_ascii=False)
                json_file = types.BufferedInputFile(
                    json_content.encode('utf-8'), 
                    filename="gifts_full_response.json"
                )
                
                await message.answer_document(
                    document=json_file,
                    caption="üìé Full JSON response with all gifts data"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∏–º–∏—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
                limited_gifts = [g for g in gifts if g.get('total_count') is not None]
                if limited_gifts:
                    limited_json = json.dumps(
                        {"limited_gifts": limited_gifts}, 
                        indent=2, 
                        ensure_ascii=False
                    )
                    limited_file = types.BufferedInputFile(
                        limited_json.encode('utf-8'),
                        filename="limited_gifts_only.json"
                    )
                    await message.answer_document(
                        document=limited_file,
                        caption=f"üéÅ Limited gifts only ({len(limited_gifts)} items)"
                    )
                
            else:
                await message.answer("‚ùå Failed to fetch gifts data. Check logs for details.")
                
    except Exception as e:
        log.error(f"Error in debug_gifts command: {e}")
        await message.answer(f"‚ùå Error: {str(e)}")


@router.message(Command(commands=["check_autobuy"]))
async def check_autobuy_status(message: types.Message, db_session):
    """
    Check detailed autobuy status and conditions.
    """
    try:
        with db_session as db:
            from db.models import User, AutoBuySettings, Gift
            
            user = db.query(User).filter(User.user_id == message.from_user.id).first()
            if not user:
                await message.answer("‚ùå User not found")
                return
                
            settings = db.query(AutoBuySettings).filter(
                AutoBuySettings.user_id == message.from_user.id
            ).first()
            
            if not settings:
                await message.answer("‚ùå Autobuy settings not found")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏
            new_gifts = db.query(Gift).filter(Gift.is_new == 1).all()
            
            status_text = (
                f"üîç **Autobuy Debug Info**\n\n"
                f"Status: {'üü¢ Enabled' if settings.status == 'enabled' else 'üî¥ Disabled'}\n"
                f"Your balance: {user.balance}‚≠ê\n"
                f"Price range: {settings.price_limit_from} - {settings.price_limit_to}‚≠ê\n"
                f"Supply limit: {settings.supply_limit or 'Not set'}\n"
                f"Cycles: {settings.cycles}\n\n"
                f"üì¶ New gifts in DB: {len(new_gifts)}\n"
            )
            
            if new_gifts:
                status_text += "\n**New gifts available for autobuy:**\n"
                for gift in new_gifts[:5]:
                    can_buy = (
                        gift.price is not None and
                        settings.price_limit_from <= gift.price <= settings.price_limit_to and
                        (settings.supply_limit is None or 
                         (gift.total_count is not None and gift.total_count <= settings.supply_limit)) and
                        user.balance >= gift.price
                    )
                    
                    status_text += (
                        f"\n‚Ä¢ Gift {gift.gift_id}:\n"
                        f"  Price: {gift.price}‚≠ê\n"
                        f"  Total: {gift.total_count or 'Unlimited'}\n"
                        f"  Can buy: {'‚úÖ Yes' if can_buy else '‚ùå No'}\n"
                    )
                    
                    if not can_buy:
                        reasons = []
                        if gift.price is None:
                            reasons.append("No price")
                        elif not (settings.price_limit_from <= gift.price <= settings.price_limit_to):
                            reasons.append(f"Price out of range")
                        if gift.total_count is None:
                            reasons.append("Unlimited gift")
                        elif settings.supply_limit and gift.total_count > settings.supply_limit:
                            reasons.append(f"Supply > limit")
                        if user.balance < (gift.price or 0):
                            reasons.append("Insufficient balance")
                        
                        if reasons:
                            status_text += f"  Reason: {', '.join(reasons)}\n"
            
            await message.answer(status_text, parse_mode="Markdown")
            
    except Exception as e:
        log.error(f"Error in check_autobuy_status: {e}")
        await message.answer(f"‚ùå Error: {str(e)}")